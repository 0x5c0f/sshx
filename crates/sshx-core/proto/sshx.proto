// This file contains the service definition for sshx, used by the client to
// communicate their terminal state over gRPC.

syntax = "proto3";
package sshx;

service SshxService {
  // Create a new SSH session for a given computer.
  rpc Open(OpenRequest) returns (OpenResponse);

  // Stream real-time commands and terminal outputs to the session.
  rpc Channel(stream ClientUpdate) returns (stream ServerUpdate);

  // Gracefully shut down an existing SSH session.
  rpc Close(CloseRequest) returns (CloseResponse);
}

// Details of bytes exchanged with the terminal.
message TerminalData {
  uint32 id = 1;   // ID of the shell.
  string data = 2; // UTF-8 terminal data.
  uint64 seq = 3;  // Sequence number of the first byte.
}

// Request to open an sshx session.
message OpenRequest {
  string origin = 1; // Web origin of the server.
}

// Details of a newly-created sshx session.
message OpenResponse {
  string name = 1; // Name of the session.
  string url = 2;  // Public web URL to view as a client.
}

// Sequence numbers for all active shells, used for synchronization.
message SequenceNumbers {
  map<uint32, uint64> map = 1; // Active shells and their sequence numbers.
}

// Bidirectional streaming update from the client.
message ClientUpdate {
  oneof client_message {
    string session_name = 1;  // First stream message.
    TerminalData data = 2;    // Stream data from the terminal.
    uint32 created_shell = 3; // Acknowledge that a new shell was created.
    uint32 closed_shell = 4;  // Acknowledge that a shell was closed.
    string error = 15;
  }
}

// Bidirectional streaming update from the server.
message ServerUpdate {
  oneof server_message {
    TerminalData data = 1;    // Remote input bytes, `seq` field ignored.
    uint32 create_shell = 2;  // ID of a new shell.
    uint32 close_shell = 3;   // ID of a shell to close.
    SequenceNumbers sync = 4; // Periodic sequence number sync.
    string error = 15;
  }
}

// Request to stop a sshx session gracefully.
message CloseRequest {
  string name = 1; // Name of the session to terminate.
}

// Server response to closing a session.
message CloseResponse {
  bool exists = 1; // True if the session was found and closed.
}
